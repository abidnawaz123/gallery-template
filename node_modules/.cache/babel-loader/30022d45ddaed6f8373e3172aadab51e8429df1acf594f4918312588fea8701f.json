{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  data: [],\n  loading: 'idle',\n  error: null\n};\nconst fetchApiData = createAsyncThunk('api/fetchData', async () => {\n  // const response = await fetch(\"https://api.thecatapi.com/v1/images/search?limit=80&mime_types=&order=Rand om&size=small&page=3&sub_id=demo-ce06ee\");\n\n  const response = await fetch(\"https://api.slingacademy.com/v1/sample-data/photos\");\n  if (!response.ok) {\n    throw new Error('Network response was not ok');\n  }\n  const data = await response.json();\n  return data;\n});\nconst apiSlice = createSlice({\n  name: 'api',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchApiData.pending, state => {\n      state.loading = 'loading';\n      state.error = null;\n    }).addCase(fetchApiData.fulfilled, (state, action) => {\n      state.loading = 'succeeded';\n      state.data = action.payload;\n    }).addCase(fetchApiData.rejected, (state, action) => {\n      state.loading = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport { fetchApiData };\nexport default apiSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","data","loading","error","fetchApiData","response","fetch","ok","Error","json","apiSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["/home/workspace/Desktop/gallerysite/src/components/redux/apiSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n    data: [],\n    loading: 'idle',\n    error: null,\n};\n\nconst fetchApiData = createAsyncThunk('api/fetchData', async () => {\n    // const response = await fetch(\"https://api.thecatapi.com/v1/images/search?limit=80&mime_types=&order=Rand om&size=small&page=3&sub_id=demo-ce06ee\");\n    \n    const response = await fetch(\"https://api.slingacademy.com/v1/sample-data/photos\");\n\n    if (!response.ok) {\n        throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    return data;\n});\n\nconst apiSlice = createSlice({\n    name: 'api',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchApiData.pending, (state) => {\n                state.loading = 'loading';\n                state.error = null;\n            })\n            .addCase(fetchApiData.fulfilled, (state, action) => {\n                state.loading = 'succeeded';\n                state.data = action.payload;\n            })\n            .addCase(fetchApiData.rejected, (state, action) => {\n                state.loading = 'failed';\n                state.error = action.error.message;\n            });\n    },\n});\n\nexport { fetchApiData };\nexport default apiSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE,EAAE;EACRC,OAAO,EAAE,MAAM;EACfC,KAAK,EAAE;AACX,CAAC;AAED,MAAMC,YAAY,GAAGL,gBAAgB,CAAC,eAAe,EAAE,YAAY;EAC/D;;EAEA,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,oDAAoD,CAAC;EAElF,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAClD;EACA,MAAMP,IAAI,GAAG,MAAMI,QAAQ,CAACI,IAAI,CAAC,CAAC;EAClC,OAAOR,IAAI;AACf,CAAC,CAAC;AAEF,MAAMS,QAAQ,GAAGZ,WAAW,CAAC;EACzBa,IAAI,EAAE,KAAK;EACXX,YAAY;EACZY,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACFC,OAAO,CAACX,YAAY,CAACY,OAAO,EAAGC,KAAK,IAAK;MACtCA,KAAK,CAACf,OAAO,GAAG,SAAS;MACzBe,KAAK,CAACd,KAAK,GAAG,IAAI;IACtB,CAAC,CAAC,CACDY,OAAO,CAACX,YAAY,CAACc,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAACf,OAAO,GAAG,WAAW;MAC3Be,KAAK,CAAChB,IAAI,GAAGkB,MAAM,CAACC,OAAO;IAC/B,CAAC,CAAC,CACDL,OAAO,CAACX,YAAY,CAACiB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACf,OAAO,GAAG,QAAQ;MACxBe,KAAK,CAACd,KAAK,GAAGgB,MAAM,CAAChB,KAAK,CAACmB,OAAO;IACtC,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AAEF,SAASlB,YAAY;AACrB,eAAeM,QAAQ,CAACa,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}