{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  data: [],\n  loading: 'idle',\n  error: null,\n  tag: []\n};\nconst fetchApiData = createAsyncThunk('api/fetchData', async () => {\n  // const response = await fetch(\"https://api.slingacademy.com/v1/sample-data/photos?offset=5&limit=20\");\n  const response = await fetch(\"http://localhost:8000/photos\");\n  if (!response.ok) {\n    throw new Error('Error in response');\n  }\n  const data = await response.json();\n  return data;\n});\nconst addApiData = createAsyncThunk('api/addData', async data => {\n  const response = await fetch(\"http://localhost:8000/photos\", {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  if (!response.ok) {\n    throw new Error('Error in response');\n  }\n  const responseData = await response.json();\n  return responseData;\n});\nconst deleteApiData = createAsyncThunk('api/deleteData', async id => {\n  console.log('this is id ---.>>', id);\n  const response = await fetch(`http://localhost:8000/photos/${id}`, {\n    method: 'DELETE'\n  });\n  if (!response.ok) {\n    throw new Error('Error in response');\n  }\n  const data = await response.json();\n  return data;\n});\nconst apiSlice = createSlice({\n  name: 'api',\n  initialState,\n  reducers: {\n    updateLocalData: (state, action) => {\n      state.tag = [...state.tag, action.payload];\n    },\n    deleteLocalData: (state, action) => {\n      state.tag = state.tag.filter((items, index) => {\n        return items.tag !== action.payload;\n      });\n    },\n    updateLocalDataSize: (state, action) => {\n      const toUpdateState = state.tag[action.payload.tag];\n      state.tag = toUpdateState.height = action.payload.height;\n      console.log('toUpdateState', toUpdateState);\n      // console.log('this is one ->', action.payload)\n    }\n    // if(action.type == \"Add\"){\n    //     state.tag = [...state.tag, action.payload.data]\n    // }else if(action.type == \"Delete\"){\n    //     state.tag = state.tag.filter((items,ind)=>{\n    //         return(items.tag !== action.payload.tag)\n    //     })\n    // }\n  },\n\n  extraReducers: builder => {\n    builder.addCase(fetchApiData.pending, state => {\n      state.loading = 'loading';\n      state.error = null;\n    }).addCase(fetchApiData.fulfilled, (state, action) => {\n      state.loading = 'succeeded';\n      state.data = action.payload;\n    }).addCase(fetchApiData.rejected, (state, action) => {\n      state.loading = 'failed';\n      state.error = action.error.message;\n    })\n    //add data\n    .addCase(addApiData.pending, state => {\n      state.loading = 'loading';\n      state.error = null;\n    }).addCase(addApiData.fulfilled, (state, action) => {\n      state.loading = 'succeeded';\n      state.data = action.payload;\n    }).addCase(addApiData.rejected, (state, action) => {\n      state.loading = 'failed';\n      state.error = action.error.message;\n    })\n    //delete api\n    .addCase(deleteApiData.pending, state => {\n      state.loading = 'loading';\n      state.error = null;\n    }).addCase(deleteApiData.fulfilled, (state, action) => {\n      state.loading = 'succeeded';\n      state.data = action.payload;\n    }).addCase(deleteApiData.rejected, (state, action) => {\n      state.loading = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  updateLocalData,\n  deleteLocalData,\n  updateLocalDataSize\n} = apiSlice.actions;\nexport { fetchApiData, deleteApiData, addApiData };\nexport default apiSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","data","loading","error","tag","fetchApiData","response","fetch","ok","Error","json","addApiData","method","headers","body","JSON","stringify","responseData","deleteApiData","id","console","log","apiSlice","name","reducers","updateLocalData","state","action","payload","deleteLocalData","filter","items","index","updateLocalDataSize","toUpdateState","height","extraReducers","builder","addCase","pending","fulfilled","rejected","message","actions","reducer"],"sources":["/home/workspace/Desktop/Projects/gallery-template/src/components/redux/apiSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n    data: [],\n    loading: 'idle',\n    error: null,\n    tag: [],\n};\n\nconst fetchApiData = createAsyncThunk('api/fetchData', async () => {\n\n    // const response = await fetch(\"https://api.slingacademy.com/v1/sample-data/photos?offset=5&limit=20\");\n    const response = await fetch(\"http://localhost:8000/photos\")\n\n    if (!response.ok) {\n        throw new Error('Error in response');\n    }\n    const data = await response.json();\n    return data;\n});\n\n\n\nconst addApiData = createAsyncThunk('api/addData', async (data) => {\n    const response = await fetch(\"http://localhost:8000/photos\", {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n        throw new Error('Error in response');\n    }\n    const responseData = await response.json();\n    return responseData;\n});\n\n\n\nconst deleteApiData = createAsyncThunk('api/deleteData', async (id) => {\n    console.log('this is id ---.>>', id)\n    const response = await fetch(`http://localhost:8000/photos/${id}`, {\n        method: 'DELETE',\n    })\n\n    if (!response.ok) {\n        throw new Error('Error in response');\n    }\n    const data = await response.json();\n    return data;\n});\n\nconst apiSlice = createSlice({\n    name: 'api',\n    initialState,\n    reducers: {\n        updateLocalData: (state, action) => {\n            state.tag = [...state.tag, action.payload]\n        },\n        deleteLocalData: (state, action) => {\n            state.tag = state.tag.filter((items, index) => {\n                return (items.tag !== action.payload)\n            })\n        },\n        updateLocalDataSize: (state, action) => {\n            const toUpdateState = state.tag[action.payload.tag]\n            state.tag = toUpdateState.height = action.payload.height\n            console.log('toUpdateState', toUpdateState)\n            // console.log('this is one ->', action.payload)\n        }\n        // if(action.type == \"Add\"){\n        //     state.tag = [...state.tag, action.payload.data]\n        // }else if(action.type == \"Delete\"){\n        //     state.tag = state.tag.filter((items,ind)=>{\n        //         return(items.tag !== action.payload.tag)\n        //     })\n        // }\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(fetchApiData.pending, (state) => {\n                state.loading = 'loading';\n                state.error = null;\n            })\n            .addCase(fetchApiData.fulfilled, (state, action) => {\n                state.loading = 'succeeded';\n                state.data = action.payload;\n            })\n            .addCase(fetchApiData.rejected, (state, action) => {\n                state.loading = 'failed';\n                state.error = action.error.message;\n            })\n            //add data\n            .addCase(addApiData.pending, (state) => {\n                state.loading = 'loading';\n                state.error = null;\n            })\n            .addCase(addApiData.fulfilled, (state, action) => {\n                state.loading = 'succeeded';\n                state.data = action.payload;\n            })\n            .addCase(addApiData.rejected, (state, action) => {\n                state.loading = 'failed';\n                state.error = action.error.message;\n            })\n            //delete api\n            .addCase(deleteApiData.pending, (state) => {\n                state.loading = 'loading';\n                state.error = null;\n            })\n            .addCase(deleteApiData.fulfilled, (state, action) => {\n                state.loading = 'succeeded';\n                state.data = action.payload;\n            })\n            .addCase(deleteApiData.rejected, (state, action) => {\n                state.loading = 'failed';\n                state.error = action.error.message;\n            });\n    },\n});\n\nexport const { updateLocalData, deleteLocalData, updateLocalDataSize } = apiSlice.actions;\nexport { fetchApiData, deleteApiData, addApiData };\nexport default apiSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}